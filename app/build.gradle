plugins {
    id 'com.android.application'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
}

android {
    namespace 'com.github.freeman.bootcamp'
    compileSdk 33


    defaultConfig {
        applicationId "com.github.freeman.bootcamp"
        minSdk 28
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.2' //1.2.0
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    lintOptions {
        abortOnError false
    }
    signingConfigs {
        debug {
            storeFile file("external/debug.keystore")
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.0'
    implementation "androidx.compose.ui:ui:1.4.1"
    implementation "androidx.compose.ui:ui-tooling-preview:1.4.1"
    implementation 'androidx.compose.material:material:1.4.1'
//    implementation 'androidx.compose.material3:material3:1.1.0-beta02'
    implementation 'com.google.android.material:material:1.8.0'

    implementation "androidx.compose.material3:material3:1.1.0"
    implementation "androidx.compose.material3:material3-window-size-class:1.1.0"

    implementation 'androidx.media3:media3-exoplayer:1.1.0-alpha01'
    implementation "androidx.media3:media3-ui:1.1.0-alpha01"

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    implementation 'androidx.camera:camera-core:1.2.2'
    implementation "androidx.camera:camera-camera2:1.3.0-alpha06"
    implementation 'androidx.camera:camera-lifecycle:1.2.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:core-ktx:1.5.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.5.1'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.4.1"

    // Warning: do NOT change Awaitility's version!
    androidTestImplementation 'org.awaitility:awaitility:3.1.6'
    debugImplementation "androidx.compose.ui:ui-tooling:1.4.1"
    debugImplementation "androidx.compose.ui:ui-test-manifest:1.4.1"

    //Drawbox library dependency
    implementation group: 'io.ak1', name: 'drawbox', version: '1.0.3'
    //RangVikalp library dependency
    implementation  'io.ak1:rang-vikalp:1.0.0-alpha02'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.3')

    // When using the BoM, you don't specify versions in Firebase library dependencies

    // Add the dependency for the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics-ktx'

    // TODO: Add the dependencies for any other Firebase products you want to use
    // See https://firebase.google.com/docs/android/setup#available-libraries
    // For example, add the dependencies for Firebase Authentication and Cloud Firestore
    implementation 'com.google.firebase:firebase-database-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx:21.3.0'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-storage-ktx'
    implementation 'com.firebaseui:firebase-ui-auth:8.0.1'
    implementation 'com.firebaseui:firebase-ui-database:8.0.1'

    implementation 'com.google.android.gms:play-services-auth:20.5.0'
    implementation "com.touchlane:gridpad:0.0.4"

    // Agora
    implementation "com.github.AgoraIO-Community:Android-UIKit:v2.0.0"
    //implementation 'io.agora.rtc:full-sdk:4.0.1'
    // Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.6.1"
    implementation "androidx.navigation:navigation-compose:2.6.0-alpha09"
    implementation "androidx.activity:activity-compose:1.7.0"

    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4'

    // Coroutine Lifecycle Scopes
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1"

    androidTestImplementation "androidx.navigation:navigation-testing:2.5.3"
    implementation 'com.google.firebase:firebase-storage-ktx:20.1.0'
    // UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    implementation("io.coil-kt:coil-compose:2.3.0")

    // Faces Detection
    implementation 'com.google.mlkit:face-detection:16.1.5'
    // face detection goodle play maybe unrequired
    implementation 'com.google.android.gms:play-services-mlkit-face-detection:17.1.0'
    implementation 'io.agora.rtc:full-sdk:3.5.0'

    // ffmpeg for video creation
    implementation 'com.arthenica:mobile-ffmpeg-full-gpl:4.4'



}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
    ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
            'outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec',
            'outputs/code_coverage/debugAndroidTest/connected/*/coverage.ec'
    ]))
}

connectedCheck {
    finalizedBy jacocoTestReport
}